{"ast":null,"code":"import Web3 from 'web3';\nimport Wallet from './contracts/Wallet.json';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nconst getWeb3 = () => new Promise(async (resolve, reject) => {\n  let provider = await detectEthereumProvider();\n\n  if (provider) {\n    await provider.request({\n      method: 'eth_requestAccounts'\n    });\n\n    try {\n      const web3 = new Web3(window.ethereum);\n      resolve(web3);\n    } catch (error) {\n      reject(error);\n    }\n  }\n\n  reject('Install Metamask');\n});\n\nconst getWallet = async web3 => {\n  const networkId = await web3.eth.net.getId();\n  const contractDeployment = Wallet.networks[networkId];\n  return new web3.eth.Contract(Wallet.abi, deployedNetwork && deployedNetwork.address);\n};\n\nexport { getWeb3, getWallet };","map":{"version":3,"sources":["/Users/hao/Desktop/INFO7500_Material/rock-paper-scissors_dapp_game/client/src/utils.js"],"names":["Web3","Wallet","detectEthereumProvider","getWeb3","Promise","resolve","reject","provider","request","method","web3","window","ethereum","error","getWallet","networkId","eth","net","getId","contractDeployment","networks","Contract","abi","deployedNetwork","address"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;;AAEA,MAAMC,OAAO,GAAG,MACZ,IAAIC,OAAJ,CAAa,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AACtC,MAAIC,QAAQ,GAAG,MAAML,sBAAsB,EAA3C;;AACA,MAAGK,QAAH,EAAa;AACX,UAAMA,QAAQ,CAACC,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAN;;AACA,QAAI;AACF,YAAMC,IAAI,GAAG,IAAIV,IAAJ,CAASW,MAAM,CAACC,QAAhB,CAAb;AACAP,MAAAA,OAAO,CAACK,IAAD,CAAP;AACD,KAHD,CAGE,OAAMG,KAAN,EAAa;AACbP,MAAAA,MAAM,CAACO,KAAD,CAAN;AACD;AACF;;AAACP,EAAAA,MAAM,CAAC,kBAAD,CAAN;AACH,CAXD,CADJ;;AAcA,MAAMQ,SAAS,GAAG,MAAMJ,IAAN,IAAc;AAC9B,QAAMK,SAAS,GAAG,MAAML,IAAI,CAACM,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;AACA,QAAMC,kBAAkB,GAAGlB,MAAM,CAACmB,QAAP,CAAgBL,SAAhB,CAA3B;AACA,SAAO,IAAIL,IAAI,CAACM,GAAL,CAASK,QAAb,CACHpB,MAAM,CAACqB,GADJ,EAEHC,eAAe,IAAIA,eAAe,CAACC,OAFhC,CAAP;AAID,CAPD;;AASA,SAASrB,OAAT,EAAkBW,SAAlB","sourcesContent":["import Web3 from 'web3';\nimport Wallet from './contracts/Wallet.json';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nconst getWeb3 = () =>\n    new Promise( async (resolve, reject) => {\n      let provider = await detectEthereumProvider();\n      if(provider) {\n        await provider.request({ method: 'eth_requestAccounts' });\n        try {\n          const web3 = new Web3(window.ethereum);\n          resolve(web3);\n        } catch(error) {\n          reject(error);\n        }\n      } reject('Install Metamask');\n    });\n\nconst getWallet = async web3 => {\n  const networkId = await web3.eth.net.getId();\n  const contractDeployment = Wallet.networks[networkId];\n  return new web3.eth.Contract(\n      Wallet.abi,\n      deployedNetwork && deployedNetwork.address\n  );\n};\n\nexport { getWeb3, getWallet}"]},"metadata":{},"sourceType":"module"}